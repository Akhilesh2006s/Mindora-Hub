// User Types
export interface User {
  id: string;
  name: string;
  email: string;
  role: 'student' | 'admin' | 'professional' | 'teacher';
  ageRange?: '6-15' | '16+' | 'business';
  profile: {
    avatar?: string;
    bio?: string;
    phone?: string;
    location?: {
      city?: string;
      state?: string;
      country?: string;
    };
    interests?: string[];
  };
  preferences: {
    notifications: {
      email: boolean;
      push: boolean;
      weeklyDigest: boolean;
    };
    language: {
      primary: string;
      secondary: string;
    };
    difficulty: 'beginner' | 'intermediate' | 'advanced';
  };
  progress: {
    totalModulesCompleted: number;
    totalTimeSpent: number;
    currentStreak: number;
    longestStreak: number;
    lastActivity: string;
    level: string;
    points: number;
    badges: Badge[];
  };
  subscription: {
    type: 'free' | 'premium' | 'business';
    startDate?: string;
    endDate?: string;
    isActive: boolean;
  };
  isActive: boolean;
  isEmailVerified: boolean;
  lastLogin: string;
  loginCount: number;
  createdAt: string;
  updatedAt: string;
}

export interface Badge {
  name: string;
  earnedAt: string;
  description: string;
}

// Module Types
export interface Module {
  _id: string;
  title: string;
  description: string;
  moduleType: ModuleType;
  ageRange: '6-15' | '16+' | 'business' | 'all';
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  tags: string[];
  media: {
    video?: {
      url: string;
      duration: number;
      thumbnail: string;
      transcript: string;
      subtitles: string;
    };
    audio?: {
      url: string;
      duration: number;
      transcript: string;
    };
    pdf?: {
      url: string;
      pages: number;
      title: string;
    };
    images?: Array<{
      url: string;
      caption: string;
      alt: string;
    }>;
  };
  content: {
    text?: string;
    instructions?: string;
    objectives?: string[];
    prerequisites?: string[];
  };
  quiz?: string; // Quiz ID
  srsBatch?: string; // SRS Batch ID
  assignments?: Assignment[];
  resources?: Resource[];
  estimatedDuration: number;
  publishAt: string;
  status: 'draft' | 'scheduled' | 'published' | 'archived';
  createdBy: {
    _id: string;
    name: string;
  };
  version: number;
  analytics: {
    views: number;
    completions: number;
    averageScore: number;
    averageTimeSpent: number;
  };
  isFeatured: boolean;
  isPremium: boolean;
  weeklyPackage?: {
    weekNumber: number;
    year: number;
    packageId: string;
  };
  userProgress?: UserProgress;
  createdAt: string;
  updatedAt: string;
}

export type ModuleType = 
  | 'phonics' | 'grammar' | 'vocabulary' | 'reading' | 'writing' | 'listening' | 'speaking'
  | 'communication' | 'ai' | 'finance' | 'soft-skills' | 'brainstorming' | 'math'
  | 'business-writing' | 'presentation' | 'negotiation' | 'interview';

export interface Assignment {
  title: string;
  description: string;
  type: 'writing' | 'speaking' | 'reading' | 'listening' | 'project';
  instructions: string;
  rubric: string;
  dueDate?: string;
  maxScore: number;
}

export interface Resource {
  title: string;
  type: 'link' | 'document' | 'video' | 'audio' | 'worksheet';
  url: string;
  description: string;
}

// Progress Types
export interface UserProgress {
  status: 'not-started' | 'in-progress' | 'completed' | 'abandoned';
  percentage: number;
  timeSpent: number;
  lastActivity?: string;
  bookmarks?: Bookmark[];
  notes?: Note[];
}

export interface Bookmark {
  step: number;
  timestamp: number;
  note: string;
  createdAt: string;
}

export interface Note {
  step: number;
  content: string;
  createdAt: string;
  updatedAt: string;
}

// Quiz Types
export interface Quiz {
  _id: string;
  title: string;
  description: string;
  moduleId: string;
  questions: Question[];
  settings: {
    timeLimit: number;
    attempts: number;
    shuffleQuestions: boolean;
    shuffleOptions: boolean;
    showCorrectAnswers: boolean;
    showExplanations: boolean;
    allowReview: boolean;
    passingScore: number;
  };
  totalMarks: number;
  createdBy: string;
  status: 'draft' | 'published' | 'archived';
  analytics: {
    totalAttempts: number;
    averageScore: number;
    completionRate: number;
    averageTimeSpent: number;
  };
  isAutoGenerated: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface Question {
  _id: string;
  type: 'mcq' | 'true-false' | 'fill-blank' | 'short-answer' | 'essay' | 'audio' | 'speaking';
  prompt: string;
  options?: Array<{
    text: string;
    isCorrect: boolean;
    explanation?: string;
  }>;
  correctAnswer?: any;
  explanation?: string;
  marks: number;
  difficulty: 'easy' | 'medium' | 'hard';
  tags?: string[];
  media?: {
    image?: string;
    audio?: string;
    video?: string;
  };
  hints?: Array<{
    text: string;
    penalty: number;
  }>;
  timeLimit: number;
}

// Notification Types
export interface Notification {
  _id: string;
  userId?: string;
  cohortId?: string;
  type: NotificationType;
  title: string;
  message: string;
  payload?: {
    moduleId?: string;
    quizId?: string;
    url?: string;
    action?: string;
    data?: any;
  };
  channels: {
    push: {
      sent: boolean;
      sentAt?: string;
      fcmToken?: string;
      error?: string;
    };
    email: {
      sent: boolean;
      sentAt?: string;
      email?: string;
      error?: string;
    };
    inApp: {
      sent: boolean;
      sentAt: string;
    };
  };
  priority: 'low' | 'normal' | 'high' | 'urgent';
  scheduledAt: string;
  sentAt?: string;
  read: boolean;
  readAt?: string;
  clicked: boolean;
  clickedAt?: string;
  dismissed: boolean;
  dismissedAt?: string;
  expiresAt: string;
  createdAt: string;
  updatedAt: string;
}

export type NotificationType = 
  | 'new-content' | 'reminder' | 'achievement' | 'quiz-due' | 'assignment-due'
  | 'streak-reminder' | 'weekly-digest' | 'system' | 'promotional' | 'community';

// API Response Types
export interface ApiResponse<T = any> {
  success: boolean;
  message: string;
  data?: T;
  errors?: any[];
}

export interface PaginationInfo {
  current: number;
  total: number;
  count: number;
  totalCount: number;
}

export interface PaginatedResponse<T> {
  data: T[];
  pagination: PaginationInfo;
}

// Auth Types
export interface AuthState {
  user: User | null;
  token: string | null;
  refreshToken: string | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
}

export interface LoginCredentials {
  email: string;
  password: string;
}

export interface RegisterData {
  name: string;
  email: string;
  password: string;
  ageRange?: '6-15' | '16+' | 'business';
  role?: 'student' | 'professional';
  phone?: string;
  location?: {
    city?: string;
    state?: string;
  };
}

// Navigation Types
export type RootStackParamList = {
  Auth: undefined;
  Main: undefined;
  Home: undefined;
  Modules: undefined;
  Progress: undefined;
  AIMode: undefined;
  Profile: undefined;
  ModuleDetail: { moduleId: string };
  TopicContent: { 
    moduleId: string; 
    moduleTitle?: string; 
    topicTitle: string; 
    topicDescription: string; 
  };
  VideoQuiz: {
    videoId: string;
    videoTitle: string;
    videoUrl: string;
    quizId?: string;
    quizTitle?: string;
    moduleId: string;
    topicTitle: string;
  };
  VideoQuizTest: {
    testParam?: string;
  };
  Quiz: { quizId: string; moduleId?: string; isPractice?: boolean };
  LessonPlayer: { moduleId: string; step?: number };
  Settings: undefined;
  GrammarCheck: undefined;
  SpeechPractice: undefined;
  LiveTranslation: undefined;
  
  // Dashboard Screens
  ChildrenDashboard: undefined;
  TeensDashboard: undefined;
  AdultsDashboard: undefined;
  BusinessDashboard: undefined;
  
  // Admin Screens
  AdminDashboard: undefined;
  AdminContentManagement: { dashboardType?: string; ageRange?: string };
  KidsContentManagement: { dashboardType?: string; ageRange?: string };
  ContentUpload: undefined;
  ModuleManagement: { dashboardType?: string; ageRange?: string };
  EnhancedLessonManagement: { dashboardType?: string; ageRange?: string };
  QuizManagement: undefined;
  SpeakingCoachManagement: undefined;
  VideoQuizSequence: undefined;
  VideoUpload: undefined;
  UserManagement: undefined;
  AdminModuleDetail: { moduleId: string };
  
  // Learning Screens
  SpeakingCoachPractice: undefined;
  CareerScenarios: undefined;
  SentenceBuilderManagement: undefined;
  SentenceBuilderGame: undefined;
  AIFinance: undefined;
  AIPersonalTutor: undefined;
  CommunicationEnglish: undefined;
  SoftSkills: undefined;
};

export type AuthStackParamList = {
  Login: undefined;
  Register: undefined;
  ForgotPassword: undefined;
};

// Removed MainTabParamList - using stack navigation instead

// Filter Types
export interface ModuleFilters {
  ageRange?: '6-15' | '16+' | 'business' | 'all';
  moduleType?: ModuleType;
  difficulty?: 'beginner' | 'intermediate' | 'advanced';
  tags?: string[];
  featured?: boolean;
  weekly?: boolean;
}

// AI Types
export interface GrammarCheckResponse {
  originalText: string;
  correctedText: string;
  corrections: Array<{
    type: string;
    original: string;
    suggestion: string;
    explanation: string;
    confidence: number;
  }>;
  suggestions: Array<{
    type: string;
    suggestion: string;
    explanation: string;
  }>;
  overallScore: number;
  readabilityScore: number;
}

export interface SpeechFeedbackResponse {
  transcript: string;
  accuracy: number;
  fluency: {
    score: number;
    feedback: string;
  };
  pronunciation: {
    score: number;
    issues: Array<{
      word: string;
      issue: string;
      suggestion: string;
    }>;
  };
  grammar: {
    score: number;
    corrections: any[];
  };
  suggestions: string[];
  overallScore: number;
}

// Translation Types
export interface Language {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
  keyboardType?: 'default' | 'numeric' | 'email-address' | 'phone-pad';
}

export interface TranslationRequest {
  text: string;
  sourceLanguage: string;
  targetLanguage: string;
}

export interface TranslationResponse {
  originalText: string;
  translatedText: string;
  sourceLanguage: string;
  targetLanguage: string;
  confidence: number;
  detectedLanguage?: string;
}

export interface LanguageDetectionResponse {
  language: string;
  confidence: number;
  alternatives?: Array<{
    language: string;
    confidence: number;
  }>;
}
